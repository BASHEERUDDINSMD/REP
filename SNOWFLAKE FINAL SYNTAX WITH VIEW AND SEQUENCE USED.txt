SELECT * FROM US_OPEN_CENSUS_DATA__NEIGHBORHOOD_INSIGHTS__FREE_DATASET.PUBLIC."2020_REDISTRICTING_METADATA_CBG_GEOGRAPHIC_DATA" LIMIT 250;

CREATE OR REPLACE DATABASE DB_NEIGHBORHOOD_INSIGHTS_STG;

CREATE OR REPLACE SCHEMA DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS;

CREATE OR REPLACE TABLE DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.NEIGHBORHOOD_INSIGHTS 
AS SELECT * FROM US_OPEN_CENSUS_DATA__NEIGHBORHOOD_INSIGHTS__FREE_DATASET.PUBLIC."2020_REDISTRICTING_METADATA_CBG_GEOGRAPHIC_DATA" LIMIT0;

SELECT GET_DDL('TABLE','DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.NEIGHBORHOOD_INSIGHTS');

CREATE OR REPLACE TABLE DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.NEIGHBORHOOD_INSIGHTS (
	CENSUS_BLOCK_GROUP VARCHAR,
	AMOUNT_LAND VARCHAR,
	AMOUNT_WATER VARCHAR,
	LATITUDE VARCHAR,
	LONGITUDE VARCHAR
);

CREATE OR REPLACE FILE FORMAT DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.NOQUOTES_CSV_FILEFORMAT
TYPE = CSV
COMPRESSION = AUTO 
TRIM_SPACE = TRUE 
SKIP_HEADER = 1 
FIELD_DELIMITER = ','
RECORD_DELIMITER = '\n'
FIELD_OPTIONALLY_ENCLOSED_BY = 'NONE'
NULL_IF =('\N')
ERROR_ON_COLUMN_COUNT_MISMATCH = TRUE
ESCAPE = 'NONE';

CREATE OR REPLACE STAGE DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.EXT_STG
URL = 's3://project-s3-bucket-basheer/'
STORAGE_INTEGRATION = AWS_TOVID_INTEGRATION;

LIST @DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.EXT_STG;

CREATE OR REPLACE PIPE DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.PIPE_NEIGHBORHOOD_INSIGHT 
AUTO_INGEST = TRUE
AS 
COPY INTO DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.NEIGHBORHOOD_INSIGHTS 
FROM @DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.EXT_STG 
FILE_FORMAT = (FORMAT_NAME = 'DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.NOQUOTES_CSV_FILEFORMAT') 
ON_ERROR = 'SKIP_FILE';

SHOW PIPES;

SELECT SYSTEM$PIPE_STATUS('DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.PIPE_NEIGHBORHOOD_INSIGHT');

SELECT * FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(TABLE_NAME => 'DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.NEIGHBORHOOD_INSIGHTS', START_TIME =>DATEADD(HOUR,-1,CURRENT_TIMESTAMP())));

CREATE OR REPLACE STREAM DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.STRM_NEIGHBORHOOD_INSIGHTS 
ON TABLE DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.NEIGHBORHOOD_INSIGHTS 
APPEND_ONLY = TRUE;

SELECT SYSTEM$STREAM_HAS_DATA('DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.STRM_NEIGHBORHOOD_INSIGHTS');

CREATE OR REPLACE DATABASE DB_NEIGHBORHOOD_INSIGHTS;

CREATE OR REPLACE SCHEMA DB_NEIGHBORHOOD_INSIGHTS.SCH_NEIGHBORHOOD_INSIGHTS;

CREATE OR REPLACE TABLE DB_NEIGHBORHOOD_INSIGHTS.SCH_NEIGHBORHOOD_INSIGHTS.NEIGHBORHOOD_INSIGHTS (
	CENSUS_BLOCK_GROUP VARCHAR,
	AMOUNT_LAND NUMBER,
	AMOUNT_WATER NUMBER,
	LATITUDE FLOAT,
	LONGITUDE FLOAT
);

CREATE OR REPLACE PROCEDURE DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.PROC_NEIGHBORHOOD_INSIGHTS()
RETURNS STRING NOT NULL
LANGUAGE javascript
AS 
$$ 
var stream_select_cmd = `
INSERT INTO DB_NEIGHBORHOOD_INSIGHTS.SCH_NEIGHBORHOOD_INSIGHTS.NEIGHBORHOOD_INSIGHTS 
SELECT 
CENSUS_BLOCK_GROUP :: VARCHAR,
	AMOUNT_LAND :: NUMBER,
	AMOUNT_WATER :: NUMBER,
	LATITUDE :: FLOAT,
	LONGITUDE :: FLOAT 
FROM 
DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.STRM_NEIGHBORHOOD_INSIGHTS 
WHERE 
METADATA$ACTION = 'INSERT';`
var sql_select_stream = snowflake.createStatement({sqlText:stream_select_cmd});
var stream_select_results =sql_select_stream.execute();
return 'DONE';
$$;

CREATE OR REPLACE TASK DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.TAS_NEIGHBORHOOD_INSIGHTS 
WAREHOUSE = 'PROJECT1_WH'
SCHEDULE = '1 MINUTE'
WHEN 
SYSTEM$STREAM_HAS_DATA('DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.STRM_NEIGHBORHOOD_INSIGHTS')
AS
CALL 
DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.PROC_NEIGHBORHOOD_INSIGHTS();

SHOW TASKS;

ALTER TASK DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.TAS_NEIGHBORHOOD_INSIGHTS RESUME; 
ALTER TASK DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.TAS_NEIGHBORHOOD_INSIGHTS SUSPEND;

SELECT * FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(SCHEDULED_TIME_RANGE_START =>DATEADD(HOUR,-1,CURRENT_TIMESTAMP()),TASK_NAME=>'TAS_NEIGHBORHOOD_INSIGHTS'));

SELECT * FROM DB_NEIGHBORHOOD_INSIGHTS.SCH_NEIGHBORHOOD_INSIGHTS.NEIGHBORHOOD_INSIGHTS;

CREATE OR REPLACE VIEW DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.VIEW_NEIGHBORHOOD_INSIGHTS 
AS
SELECT CENSUS_BLOCK_GROUP, AMOUNT_LAND, AMOUNT_WATER 
FROM DB_NEIGHBORHOOD_INSIGHTS.SCH_NEIGHBORHOOD_INSIGHTS.NEIGHBORHOOD_INSIGHTS;

SELECT * FROM DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.VIEW_NEIGHBORHOOD_INSIGHTS;

SELECT GET_DDL('VIEW','DB_NEIGHBORHOOD_INSIGHTS.SCH_NEIGHBORHOOD_INSIGHTS.VIEW_NEIGHBORHOOD_INSIGHTS');

CREATE OR REPLACE SEQUENCE DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.SEQ_NEIGHBORHOOD 
START = 1 
INCREMENT = 1;  

CREATE OR REPLACE TABLE DB_NEIGHBORHOOD_INSIGHTS.SCH_NEIGHBORHOOD_INSIGHTS.NEIGHBORHOOD_INSIGHTS3
( 
ENTRY_NO INT NOT NULL DEFAULT DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.SEQ_NEIGHBORHOOD.NEXTVAL,
CENSUS_BLOCK_GROUP VARCHAR,
	AMOUNT_LAND NUMBER,
	AMOUNT_WATER NUMBER,
	LONGITUDE FLOAT
);

CREATE OR REPLACE PROCEDURE DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.PROC_NEIGHBORHOOD_INSIGHTS3()
RETURNS STRING NOT NULL
LANGUAGE javascript
AS 
$$ 
var stream_select_cmd = `
INSERT INTO DB_NEIGHBORHOOD_INSIGHTS.SCH_NEIGHBORHOOD_INSIGHTS.NEIGHBORHOOD_INSIGHTS3(CENSUS_BLOCK_GROUP, AMOUNT_LAND, AMOUNT_WATER, LONGITUDE)
SELECT 
CENSUS_BLOCK_GROUP :: VARCHAR,
	AMOUNT_LAND :: NUMBER,
	AMOUNT_WATER :: NUMBER,
	LONGITUDE :: FLOAT 
FROM 
DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.STRM_NEIGHBORHOOD_INSIGHTS 
WHERE 
METADATA$ACTION = 'INSERT';`
var sql_select_stream = snowflake.createStatement({sqlText:stream_select_cmd});
var stream_select_results =sql_select_stream.execute();
return 'DONE';
$$;

CREATE OR REPLACE TASK DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.TAS_NEIGHBORHOOD_INSIGHTS3
WAREHOUSE = 'PROJECT1_WH'
SCHEDULE = '1 MINUTE'
WHEN 
SYSTEM$STREAM_HAS_DATA('DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.STRM_NEIGHBORHOOD_INSIGHTS')
AS
CALL 
DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.PROC_NEIGHBORHOOD_INSIGHTS3();

SELECT SYSTEM$STREAM_HAS_DATA('DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.STRM_NEIGHBORHOOD_INSIGHTS');

SHOW TASKS;

ALTER TASK DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.TAS_NEIGHBORHOOD_INSIGHTS3 RESUME; 
ALTER TASK DB_NEIGHBORHOOD_INSIGHTS_STG.SCH_NEIGHBORHOOD_INSIGHTS.TAS_NEIGHBORHOOD_INSIGHTS3 SUSPEND;

SELECT * FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(SCHEDULED_TIME_RANGE_START =>DATEADD(HOUR,-1,CURRENT_TIMESTAMP()),TASK_NAME=>'TAS_NEIGHBORHOOD_INSIGHTS3'));

DROP TABLE DB_NEIGHBORHOOD_INSIGHTS.SCH_NEIGHBORHOOD_INSIGHTS.NEIGHBORHOOD_INSIGHTS2;
SELECT * FROM DB_NEIGHBORHOOD_INSIGHTS.SCH_NEIGHBORHOOD_INSIGHTS.NEIGHBORHOOD_INSIGHTS2;


